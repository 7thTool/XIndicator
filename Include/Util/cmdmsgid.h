#ifndef _H_CMDMSGID_H_
#define _H_CMDMSGID_H_

#include "Util.h"
#include <UI/UIBase.h>

#include <FieldDef.h>

enum
{
	WM_PLAT_FIRST	=	WM_UIUSER,
	WM_CREATED,

	WM_PLAT_MAX,
};

//这里是通用CMD命令，对于私有CMD命令，可以自己定义，自己处理，不要把私有CMD命令丢到通用消息处理流程就可以了
//比如私有菜单命令处理，可以这样，使用TPM_RETURNCMD
/*
int nRet = (int)TrackPopupMenu(menu, TPM_RETURNCMD | TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_VERTICAL, rect.left, rect.bottom);
if(私有CMD命令) {
	私有CMD命令要全部这里处理掉
} else if(如果需要处理的通用CMD命令) {
	这里处理需要处理的或者特殊处理的通用CMD命令
} else {
	Send/PostMessage(WM_COMMAND, MAKEWPARAM(nRet, 0));
}
*/
enum
{
	ID_COMMAND = ID_COMMAND_UIUSER,
	ID_COMMAND_OPTION,
	ID_COMMAND_BACK,
	ID_COMMAND_FORWARD,
	ID_COMMAND_ESCAPE,
	ID_COMMAND_HOME,
	ID_COMMAND_REPORT,
	ID_COMMAND_TECH,
	ID_COMMAND_SEARCH,
	ID_COMMAND_SELECT_KIND,
	ID_COMMAND_SELECT_COMMODITY,
	ID_COMMAND_ADD_KIND,
	ID_COMMAND_REMOVE_KIND,
	ID_COMMAND_ADD_SELFCOMMODITY,
	ID_COMMAND_REMOVE_SELFCOMMODITY,
	ID_COMMAND_ORDER,
	ID_COMMAND_ROBOT,
	//ID_COMMAND_

	ID_CONTAINER,
	ID_CONTAINER_HOME,
	ID_CONTAINER_END,
	ID_CONTAINER_LEFT,
	ID_CONTAINER_RIGHT,
	ID_CONTAINER_UP,
	ID_CONTAINER_DOWN,
	ID_CONTAINER_PAGEUP,
	ID_CONTAINER_PAGEDOWN,
	//
	ID_CONTAINER_ORDER,
	ID_CONTAINER_ORDER_BUY,
	ID_CONTAINER_ORDER_SELL,
	ID_CONTAINER_ORDER_SEND_LIMIT,
	ID_CONTAINER_ORDER_SEND_STOP,
	ID_CONTAINER_ORDER_CLOSE,
	ID_CONTAINER_ORDER_MAX,
	//
	ID_CONTAINER_F10,
	ID_CONTAINER_PERIOD,
	ID_CONTAINER_PERIOD_MAX = ID_CONTAINER_PERIOD + CYC_MAX,
	ID_CONTAINER_DW,
	ID_CONTAINER_DW_MAX = ID_CONTAINER_DW + DW_MAX,
	ID_CONTAINER_MAX,

	ID_REPORT,
	ID_REPORT_GOTOCONTAINER,
	ID_REPORT_NEWCONTAINER,
	ID_REPORT_MAX,

	ID_TECHVIEW,
	ID_TECHVIEW_BACK,
	ID_TECHVIEW_FORWARD,
	ID_TECHVIEW_SHOWCROSSCURSOR,
	ID_TECHVIEW_SHOWMINITRADER,
	ID_TECHVIEW_ROBOT,
	ID_TECHVIEW_TEST,
	ID_TECHVIEW_LARGER,
	ID_TECHVIEW_SMALLER,
	ID_TECHVIEW_AUTO,
	ID_TECHVIEW_SHIFT,
	ID_TECHVIEW_TEMPLATE,
	ID_TECHVIEW_TEMPLATE_MAX = ID_TECHVIEW_TEMPLATE + 10,
	ID_TECHVIEW_TEMPLATE_SAVE,
	ID_TECHVIEW_KLINE,
	ID_TECHVIEW_KLINE_MAX = ID_TECHVIEW_KLINE + 10,
	ID_TECHVIEW_VOLUME,
	ID_TECHVIEW_VOLUME_MAX = ID_TECHVIEW_VOLUME + 10,
	ID_TECHVIEW_COORDINATE,
	ID_TECHVIEW_COORDINATE_MAX = ID_TECHVIEW_COORDINATE + 10,
	ID_TECHVIEW_COORDINATE_X_LR,
	ID_TECHVIEW_ADD,
	ID_TECHVIEW_REMOVE,
	ID_TECHVIEW_INDICATOR,
	ID_TECHVIEW_INDICATOR_MAX = ID_TECHVIEW_INDICATOR + 10,
	ID_TECHVIEW_INDICATOR_TEMPLATE,
	ID_TECHVIEW_INDICATOR_TEMPLATE_MAX = ID_TECHVIEW_INDICATOR_TEMPLATE + 10,
	ID_TECHVIEW_INDICATOR_TEMPLATE_SAVE,
	ID_TECHVIEW_INDICATOR_ADD,
	ID_TECHVIEW_INDICATOR_ADD_MAX = ID_TECHVIEW_INDICATOR_ADD + 10,
	ID_TECHVIEW_INDICATOR_REMOVE,
	ID_TECHVIEW_INDICATOR_INFO,
	ID_TECHVIEW_INDICATOR_MODIFY_PARAM,
	ID_TECHVIEW_INDICATOR_MODIFY_FORMULA,
	ID_TECHVIEW_INDICATOR_ADDCOMMODITY,
	ID_TECHVIEW_INDICATOR_ADDOBJECT,
	ID_TECHVIEW_INDICATOR_ADDOBJECT_MAX = ID_TECHVIEW_INDICATOR_ADDOBJECT + TVLT_MAX,
	ID_TECHVIEW_INDICATOR_USER,
	ID_TECHVIEW_INDICATOR_USER_MAX = ID_TECHVIEW_INDICATOR_USER + 199,
	ID_TECHVIEW_MAX,
	
	ID_COMMAND_MAX,
};

enum
{
	ID_COL_FIRST = IDF_INDEX,
	ID_COL_USER_FIRST = IDF_END,
	ID_COL_MESSAGE = ID_COL_USER_FIRST,
	ID_COL_USER_END,
	ID_COL_END = ID_COL_USER_END,
};

#endif//_H_CMDMSGID_H_